---
title: "Statistical Analysis of Flight Fares"
format: html
author:   
  - Anjolaoluwa Olatunbosun   
  - Ayoola Ayetigbo
  - Odomero Omokahfe
date: "4/28/2023"
editor: visual
execute:
  echo: fenced
---

## Introduction.

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Exploratory Data Analysis

##### LOAD REQUIRED LIBRARIES

```{r}
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(png)
library(grid)
library(lattice)
library(readxl)
library(lubridate)
library(scales)

```

##### LOAD DATASET

```{r}
train <- read_excel("/Users/macbookpro/Downloads/RR_finalProject/Data_Train.xlsx")
```

To get dimension of our dataset, i.e., shape

```{r}
dim(train)
```

To print the top 5 rows of our dataset

```{r}
head(train, 5)
```



##### HANDLING MISSING DATA

To check for missing values and drop missing values

```{r}
print(colSums(is.na(train)))
train <- na.omit(train)

```

##### CLEAN DATE OF JOURNEY VARIABLE

To extract day, month, year, and weekday from Date of Journey

```{r}
train$Journey_Day <- day(dmy(train$Date_of_Journey))
train$Journey_Month <- month(dmy(train$Date_of_Journey))
train$Journey_Year <- year(dmy(train$Date_of_Journey))
train$weekday <- wday(dmy(train$Date_of_Journey), label = TRUE)
```




Remove the Date_of_Journey column since it is no longer needed

```{r}
train$Date_of_Journey <- NULL
```

Now we can see the list of column names in our dataset

```{r}
names(train)
```

##### CLEAN DURATION VARIABLE

Converting duration into minutes. Firstly we define duration function

```{r}
duration <- function(test) {
  test <- gsub("\\s+", "", test) # remove white spaces
  total <- strsplit(test, split = "[a-zA-Z]+")[[1]] # split the string into substrings
  to <- total[1]
  hrs <- as.numeric(gsub("[^[:digit:]]", "", to)) * 60 # extract the hours and convert to minutes
  if (length(total) == 2) {
    mint <- as.numeric(gsub("[^[:digit:]]", "", total[2])) # extract the minutes
    hrs <- hrs + mint
  }
  return(as.character(hrs))
}

```

Apply duration function to the "Duration" column



```{r}
train$Duration <- sapply(train$Duration, duration)
```



Get number of unique values in "Duration" column



```{r}
n_distinct(train$Duration)
```

##### CLEAN DEP TIME AND ARRIVAL TIME VARIABLE

To get whether its a morning,evening,night or afternoon flight from departure time & arrival time of the flight, we will define deparrtime function first

```{r}
deparrtime <- function(x) {
  x <- gsub("\\s+", "", x) # remove white spaces
  tt <- as.numeric(strsplit(x, split = ":")[[1]][1]) # extract the hour
  if (tt >= 16 & tt < 21) {
    x <- "Evening"
  } else if (tt >= 21 | tt < 5) {
    x <- "Night"
  } else if (tt >= 5 & tt < 11) {
    x <- "Morning"
  } else if (tt >= 11 & tt < 16) {
    x <- "Afternoon"
  }
  return(x)
}

```

Then we will apply deparrtime function to the "Dep_Time" and "Arrival_Time" columns





```{r}
train$Dep_Time <- sapply(train$Dep_Time, deparrtime)
train$Arrival_Time <- sapply(train$Arrival_Time, deparrtime)
```

##### CLEAN TOTAL STOPS VARIABLE

Firstly, define stops function to Convert total_stops to 0,1,2,3 etc.

```{r}
stops <- function(x) {
  ifelse(x == 'non-stop', '0', substr(x, 1, 1))
}
```

Then we apply stops function to the "Total_Stops" column



```{r}
train$Total_Stops <- sapply(train$Total_Stops, stops)
```

The `echo: false` option disables the printing of code (only output is displayed).

## Correlation Analysis

## Regression Analysis

## Conclusion
